syntax = "proto3";
package publicawesome.stargaze.alloc.v1beta1;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "publicawesome/stargaze/alloc/v1beta1/params.proto";

// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/public-awesome/stargaze/v17/x/alloc/types";

// Msg defines the alloc Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // CreateVestingAccount defines a method that enables creating a vesting
  // account.
  rpc CreateVestingAccount(MsgCreateVestingAccount) returns (MsgCreateVestingAccountResponse);

  // FundFairburnPool defines a method to allow an account to directly
  // fund the fee collector module account.
  rpc FundFairburnPool(MsgFundFairburnPool) returns (MsgFundFairburnPoolResponse);

  // UpdateParams updates the alloc module's parameters.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// Deprecated: Cosmos SDK's CreateVestingAccount now supports start time.
message MsgCreateVestingAccount {
  option (cosmos.msg.v1.signer) = "from_address";
  option (gogoproto.equal) = true;

  string from_address = 1 [(gogoproto.moretags) = "yaml:\"from_address\""];
  string to_address = 2 [(gogoproto.moretags) = "yaml:\"to_address\""];
  repeated cosmos.base.v1beta1.Coin amount = 3 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true,
    (amino.encoding) = "legacy_coins",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];

  int64 start_time = 4 [(gogoproto.moretags) = "yaml:\"start_time\""];
  int64 end_time = 5 [(gogoproto.moretags) = "yaml:\"end_time\""];
  bool delayed = 6;
}

// MsgCreateVestingAccountResponse defines the Msg/CreateVestingAccount response
// type.
message MsgCreateVestingAccountResponse {}

// MsgFundFairburnPool allows an account to directly
// fund the fee collector pool.
message MsgFundFairburnPool {
  option (amino.name) = "alloc/MsgFundFairburnPool";
  option (cosmos.msg.v1.signer) = "sender";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string sender = 1;

  repeated cosmos.base.v1beta1.Coin amount = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (amino.encoding) = "legacy_coins"
  ];
}

// MsgFundFairburnPoolResponse defines the Msg/MsgFundFairburnPool response
// type.
message MsgFundFairburnPoolResponse {}

// MsgUpdateParams is the request type for updating module's params.
//
// Since: v14
message MsgUpdateParams {
  option (amino.name) = "alloc/MsgUpdateParams";
  option (cosmos.msg.v1.signer) = "authority";
  // Authority is the address of the governance account.
  string authority = 1;
  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.jsontag) = "params",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse is the response type for executing
// an update.
// Since: v14
message MsgUpdateParamsResponse {}
